{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "Defautl" : "heat_key"
    },

    "RegionName" : {
      "Description" : "Name of the region",
      "Type" : "String",
      "Defautl" : "RegionOne",
      "ConstraintDescription" : "must be a existing OpenStack region"
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "m1.tiny", "m1.small", "m1.medium", "m1.large", "m1.xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "LinuxDistribution": {
      "Default": "U12",
      "Description" : "Distribution of choice",
      "Type": "String",
      "AllowedValues" : [ "F17", "U12" ]
    },

    "ExternalNetworkNameOrId" : {
      "Description" : "External network name or id",
      "Type" : "String",
      "Default" : "public",
      "ConstraintDescription" : "must be a name or id of existing external network"
    },

    "ExternalGatewayIPAddress" : {
      "Description" : "External Gateway IP address",
      "Type" : "String",
      "ConstraintDescription" : "must be an IP address of external gateway"
    },

    "SubnetCidr" : {
      "Description" : "Subnet cidr",
      "Type" : "String",
      "ConstraintDescription" : "must be a cidr"
    },

    "SubnetPoolStart" : {
      "Description" : "Start of allocation pool for subnet",
      "Type" : "String",
      "ConstraintDescription" : "must be a valid IP address"
    },

    "SubnetPoolEnd" : {
      "Description" : "End of allocation pool for subnet",
      "Type" : "String",
      "ConstraintDescription" : "must be a valid IP address"
    },

    "VPNPeerCidr" : {
      "Description" : "Cidr for VPN peer",
      "Type" : "String",
      "ConstraintDescription" : "must be a valid cidr"
    },

    "DBName": {
      "Default": "wordpress",
      "Description" : "The WordPress database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "Default": "admin",
      "NoEcho": "true",
      "Description" : "The WordPress database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "Default": "admin",
      "NoEcho": "true",
      "Description" : "The WordPress database admin account password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBRootPassword": {
      "Default": "admin",
      "NoEcho": "true",
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBAvailabilityZoneName" : {
      "Description" : "Name of availability zone for server with database",
      "Type" : "String",
      "Defautl" : "nova",
      "ConstraintDescription" : "must be a name of existing availability zone"
    },

    "WordpressAvailabilityZoneName" : {
      "Description" : "Name of availability zone for server with wordpress",
      "Type" : "String",
      "Defautl" : "nova",
      "ConstraintDescription" : "must be a name of existing availability zone"
    }

  },

  "Mappings" : {
    "OpenstackRegion2Image" : {

      "RegionOne" : {
        "F17" : "F17-x86_64-cfntools",
        "U12" : "ubuntu-vm-heat-cfntools"
      },

      "RegionTwo" : {
        "F17" : "F17-x86_64-cfntools",
        "U12" : "ubuntu-vm-heat-cfntools"
      }

    }

  },

  "Resources" : {

    "NetworkSetup": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "http://127.0.0.1:8080/common/vpn_service.template",
        "Parameters": {
          "ExternalNetworkNameOrId"  : { "Ref" : "ExternalNetworkNameOrId" },
          "ExternalGatewayIPAddress" : { "Ref" : "ExternalGatewayIPAddress" },
          "SubnetCidr"               : { "Ref" : "SubnetCidr" },
          "SubnetPoolStart"          : { "Ref" : "SubnetPoolStart" },
          "SubnetPoolEnd"            : { "Ref" : "SubnetPoolEnd" },
          "VPNPeerCidr"              : { "Ref" : "VPNPeerCidr" }
        }
      }
    },

    "DBServer" : {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "mysql"        : [],
                "mysql-server" : []
              }
            },
            "services" : {
              "systemd" : {
                "mysqld"   : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId"      : { "Fn::FindInMap" : [ "OpenstackRegion2Image",
                                               { "Ref" : "RegionName" },
                                               { "Ref" : "LinuxDistribution" } ] },
        "AvailabilityZone" : { "Ref" : "DBAvailabilityZoneName"},
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName"      : { "Ref" : "KeyName" },
        "SubnetId"     : { "Fn::GetAtt": [ "NetworkSetup",
                                           "Outputs.SubnetId" ] },
        "UserData"     : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "/opt/aws/bin/cfn-init\n",
          "# Setup MySQL root password and create a user\n",
          "mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "'\n",
          "cat << EOF | mysql -u root --password='", { "Ref" : "DBRootPassword" }, "'\n",
          "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
          "GRANT ALL PRIVILEGES ON ", { "Ref" : "DBName" }, ".* TO \"", { "Ref" : "DBUsername" }, "\"@\"%\"\n",
          "IDENTIFIED BY \"", { "Ref" : "DBPassword" }, "\";\n",
          "FLUSH PRIVILEGES;\n",
          "EXIT\n",
          "EOF\n"
        ]]}}
      }
    },

    "AppServer" : {
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "DBServer",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "httpd"        : [],
                "wordpress"    : []
              }
            },
            "services" : {
              "systemd" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId"      : { "Fn::FindInMap" : [ "OpenstackRegion2Image",
                                               { "Ref" : "RegionName" },
                                               { "Ref" : "LinuxDistribution" } ] },
        "AvailabilityZone" : { "Ref" : "WordpressAvailabilityZoneName"},
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName"      : { "Ref" : "KeyName" },
        "SubnetId"     : { "Fn::GetAtt": [ "NetworkSetup",
                                           "Outputs.SubnetId" ] },
        "UserData"     : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "/opt/aws/bin/cfn-init\n",
          "sed -i \"/Deny from All/d\" /etc/httpd/conf.d/wordpress.conf\n",
          "sed -i \"s/Require local/Require all granted/\" /etc/httpd/conf.d/wordpress.conf\n",
          "sed --in-place --e s/database_name_here/", { "Ref" : "DBName" },
          "/ --e s/username_here/", { "Ref" : "DBUsername" },
          "/ --e s/password_here/", { "Ref" : "DBPassword" },
          "/ --e s/localhost/", { "Fn::GetAtt" : [ "DBServer", "PublicIp" ] },
          "/ /usr/share/wordpress/wp-config.php\n",
          "systemctl restart httpd.service\n"
        ]]}}
      }
    }

  },

  "Outputs" : {

    "DBServerIP" : {
      "Description" : "DB Server IP address",
      "Value" : { "Fn::GetAtt" : [ "DBServer", "PublicIp" ] }
    },

    "AppServerIP" : {
      "Description" : "Application Server IP address",
      "Value" : { "Fn::GetAtt" : [ "AppServer", "PublicIp" ] }
    }

  }

}
